[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "nbdev_cards2",
    "section": "",
    "text": "This file will become your README and also the index of your documentation."
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "nbdev_cards2",
    "section": "Install",
    "text": "Install\nInstall using pip:\n    pip install nbdev_cards2\nor with conda:\n    conda install -c fastai nbdev_cards2"
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "nbdev_cards2",
    "section": "How to use",
    "text": "How to use\nThis lib provides a Card class that can be used to create, display and compare playing cards.\n\nCard(1,3)\n\n3♥\n\n\nSuits are numbered according to this list:\n\nsuits\n\n['♠', '♥', '♦', '♣']"
  },
  {
    "objectID": "card.html",
    "href": "card.html",
    "title": "cards – a collection of cards",
    "section": "",
    "text": "We will be using numbers to represent playing cards clubs and ranks. These are the suits:\n\nsuits\n\n['♠', '♥', '♦', '♣']\n\n\nFor instance, the suit at index 0:\n\nsuits[0]\n\n'♠'\n\n\nThese are the ranks:\n\nranks\n\n[None, 'A', '2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K']\n\n\nFor instace, the rank at index 1 (note that there isn’t a rank at index 0, since we are using 1-based indexing):\n\nranks[1]\n\n'A'\n\n\n\nc = Card(1,1)\nc\n\nA♥\n\n\n\nsource\n\nCard\n\n Card (suit:int, rank:int)\n\nA playing card.\n\n\n\n\nType\nDetails\n\n\n\n\nsuit\nint\nA number representing the suit (0-3)\n\n\nrank\nint\nA number representing the rank (1-13)\n\n\n\n\n\nEquality testing\n\ntest_eq(Card(1,1), Card(1,1))\ntest_eq(Card(2,2), Card(2,2))\ntest_ne(Card(1,1), Card(1,2))\n\n\nassert Card(1,1) < Card(1,2)\nassert Card(4,5) < Card(5,5)\n\n\nassert Card(1,2) > Card(1,1)\nassert Card(5,5) > Card(4,5)"
  },
  {
    "objectID": "deck.html",
    "href": "deck.html",
    "title": "deck",
    "section": "",
    "text": "source\n\nDeck\n\n Deck ()\n\nA deck of 52 cards, not including jokers\nWhen we initialize a Deck, all of the cards will be present\n\ndeck = Deck(); deck\n\nA♠; 2♠; 3♠; 4♠; 5♠; 6♠; 7♠; 8♠; 9♠; 10♠; J♠; Q♠; K♠; A♥; 2♥; 3♥; 4♥; 5♥; 6♥; 7♥; 8♥; 9♥; 10♥; J♥; Q♥; K♥; A♦; 2♦; 3♦; 4♦; 5♦; 6♦; 7♦; 8♦; 9♦; 10♦; J♦; Q♦; K♦; A♣; 2♣; 3♣; 4♣; 5♣; 6♣; 7♣; 8♣; 9♣; 10♣; J♣; Q♣; K♣\n\n\nThat should be 52 cards.\n\ntest_eq(len(deck), 52)\n\nAs a reminder, these are the suits we defined for a Card.\n\nsuits\n\n['♠', '♥', '♦', '♣']\n\n\n\n@patch\ndef pop(self:Deck, \n        i=-1): # default to removing the top card\n    \"Remove and return a card from the deck\"\n    return self.cards.pop(i)\n\n\n@patch\ndef remove(self:Deck, \n           c:Card): # Card to remove\n    \"Remove a card from the deck\"\n    self.cards.remove(c)\n\n\nsource\n\n\ndraw_n\n\n draw_n (n:int, replace:bool=True)\n\nDraw n cards from the deck\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nn\nint\n\nNumber of cards to draw\n\n\nreplace\nbool\nTrue\nWhether to replace cards after drawing\n\n\n\n\n\nTesting\n\ndeck = Deck()\ntest_eq(deck.pop(), Card(3,13))\n\nThere are 51 cards in the deck now\n\ntest_eq(len(deck), 51)"
  }
]